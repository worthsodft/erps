"use strict";const e=require("../utils.js"),t=(t,a,r)=>{let i={};return t.forEach((t=>{e.isUndefined(r[t])?e.isUndefined(a[t])||(i[t]=a[t]):i[t]=r[t]})),i};exports.mergeConfig=(a,r={})=>{const i=r.method||a.method||"GET";let n={baseURL:r.baseURL||a.baseURL||"",method:i,url:r.url||"",params:r.params||{},custom:{...a.custom||{},...r.custom||{}},header:e.deepMerge(a.header||{},r.header||{})};if(n={...n,...t(["getTask","validateStatus","paramsSerializer","forcedJSONParsing"],a,r)},"DOWNLOAD"===i){const e=["timeout","filePath"];n={...n,...t(e,a,r)}}else if("UPLOAD"===i){delete n.header["content-type"],delete n.header["Content-Type"];["filePath","name","timeout","formData"].forEach((t=>{e.isUndefined(r[t])||(n[t]=r[t])})),e.isUndefined(n.timeout)&&!e.isUndefined(a.timeout)&&(n.timeout=a.timeout)}else{const e=["data","timeout","dataType","responseType","enableHttp2","enableQuic","enableCache","enableHttpDNS","httpDNSServiceId","enableChunked","forceCellularNetwork"];n={...n,...t(e,a,r)}}return n};
